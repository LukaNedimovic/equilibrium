Good Software Takes Ten Years. Get Used To it. Have a look at this little chart: [Source: Iris Associates ] This is a chart showing the number of installed seats of the Lotus Notes workgroup software, from the time it was introduced in 1989 through 2000. In fact when Notes 1.0 finally shipped it had been under development for five years . Notice just how dang long it took before Notes was really good enough that people started buying it. Indeed, from the first line of code written in 1984 until the hockey-stick part of the curve where things really started to turn up, about 11 years passed. During this time Ray Ozzie and his crew weren't drinking pi√±a coladas in St Barts. They were writing code. The reason I'm telling you this story is that it's not unusual for a serious software application. The Oracle RDBMS has been around for 22 years now. Windows NT development started 12 years ago. Microsoft Word is positively long in the tooth; I remember seeing Word 1.0 for DOS in high school (that dates me, doesn't it? It was 1983.) To experienced software people, none of this is very surprising. You write the first version of your product, a few people use it, they might like it, but there are too many obvious missing features, performance problems, whatever, so a year later, you've got version 2.0. Everybody argues about which features are going to go into 2.0, 3.0, 4.0, because there are so many important things to do. I remember from the Excel days how many things we had that we just had to do. Pivot Tables. 3-D spreadsheets. VBA. Data access. When you finally shipped a new version to the waiting public, people fell all over themselves to buy it. Remember Windows 3.1? And it positively, absolutely needed long file names, it needed memory protection, it needed plug and play, it needed a zillion important things that we can't imagine living without, but there was no time, so those features had to wait for Windows 95. But that's just the first ten years. After that, nobody can think of a single feature that they really need. Is there anything you need that Excel 2000 or Windows 2000 doesn't already do? With all due respect to my friends on the Office team, I can't help but feel that there hasn't been a useful new feature in Office since about 1995. Many of the so-called "features" added since then, like the reviled ex- paperclip and auto-document-mangling, are just annoyances and O'Reilly is doing a nice business selling books telling you how to turn them off. So, it takes a long time to write a good program, but when it's done, it's done . Oh sure, you can crank out a new version every year or two, trying to get the upgrade revenues, but eventually people will ask: "why fix what ain't broken?" Failure to understand the ten-year rule leads to crucial business mistakes. Mistake number 1. The Get Big Fast syndrome. This fallacy of the Internet bubble has already been thoroughly discredited elsewhere, so I won't flog it too much. But an important observation is that the bubble companies that were trying to create software (as opposed to pet food shops) just didn't have enough time for their software to get good. My favorite example is desktop.com, which had the beginnings of something that would have been great if they had worked on it for 10 years. But the build-to-flip mentality, the huge overstaffing and overspending of the company, and the need to raise VC every ten minutes made it impossible to develop the software over 10 years. And the 1.0 version, like everything, was really morbidly awful, and nobody could imagine using it. But desktop.com 8.0 might have been seriously cool. We'll never know. Mistake number 2. the Overhype syndrome. When you release 1.0, you might want to actually keep it kind of quiet. Let the early adopters find it. If you market it and promote it too heavily, when people see what you've actually done, they will be underwhelmed. Desktop.com is an example of this, so is Marimba, and Groove: they had so much hype on day one that people stopped in and actually looked at their 1.0 release, trying to see what all the excitement was about, but like most 1.0 products, it was about as exciting as watching grass dry. So now there are a million people running around who haven't looked at Marimba since 1996, and who think it's still a dorky list box that downloads Java applets that was thrown together in about 4 months. Keeping 1.0 quiet means you have to be able to break even with fewer sales. And that means you need lower costs, which means fewer employees, which, in the early days of software development, is actually a really great idea, because if you can only afford 1 programmer at the beginning, the architecture is likely to be reasonably consistent and intelligent, instead of a big mishmash with dozens of conflicting ideas from hundreds of programmers that needs to be rewritten from scratch (like Netscape, according to the defenders of the decision to throw away all the source code and start over). Mistake number 3. Believing in Internet Time . Around 1996, the New York Times first noticed that new Netscape web browser releases were coming out every six months or so, much faster than the usual 2 year upgrade cycle people were used to from companies like Microsoft. This led to the myth that there was something called "Internet time" in which "business moved faster." Which would be nice, but it wasn't true. Software was not getting created any faster, it was just getting released more often. And in the early stages of a new software product, there are so many important things to add that you can do releases every six months and still add a bunch of great features that people Gotta Have. So you do it. But you're not writing software any faster than you did before. (I will give the Internet Explorer team credit. With IE versions 3.0 and 4.0 they probably created software about ten times faster than the industry norm. This had nothing to do with the Internet and everything to do with the fact that they had a fantastic, war-hardened team that benefited from 15 years of collective experience creating commercial software at Microsoft.) Mistake number 4. Running out of upgrade revenues when your software is done. A bit of industry lore: in the early days (late 1980s), the PC industry was growing so fast that almost all software was sold to first time users. Microsoft generally charged about $30 for an upgrade to their $500 software packages until somebody noticed that the growth from new users was running out, and too many copies were being bought as upgrades to justify the low price. Which got us to where we are today, with upgrades generally costing 50%-60% of the price of the full version and making up the majority of the sales. Now the trouble comes when you can't think of any new features, so you put in the paperclip, and then you take out the paperclip, and you try to charge people both times, and they aren't falling for it. That's when you start to wish that you had charged people for one year licenses, so you can make your product a subscription and have permission to keep taking their money even when you haven't added any new features. It's a neat accounting trick: if you sell a software package for $100, Wall Street will value that at $100. But if you can sell a one year license for $30, then you can claim that you're going to get recurring revenue of $30 for the next, say, 10 years, which is worth $200 to Wall Street. Tada! Stock price doubles! (Incidentally, that's how SAS charges for their software. They get something like 97% renewals every year.) The trouble is that with packaged software like Microsoft's, customers won't fall for it. Microsoft has been trying to get their customers to accept subscription-based software since the early 90's, and they get massive pushback from their customers every single time. Once people got used to the idea that you "own" the software that you bought, and you don't have to upgrade if you don't want the new features, that can be a big problem for the software company which is trying to sell a product that is already feature complete. Mistake number 5. The "We'll Ship It When It's Ready" syndrome. Which reminds me. What the hell is going on with Mozilla? I made fun of them more than a year ago because three years had passed and the damn thing was still not out the door. There's a frequently-obsolete chart on their web site which purports to show that they now think they will ship in Q4 2001. Since they don't actually have anything like a schedule based on estimates, I'm not sure why they think this. Ah, such is the state of software development in Internet Time Land. But I'm getting off topic. Yes, software takes 10 years to write, and no, there is no possible way a business can survive if you don't ship anything for 10 years. By the time you discount that revenue stream from 10 years in the future to today, you get bupkis , especially since business analysts like to pretend that everything past 5 years is just "residual value" when they make their fabricated, fictitious spreadsheets that convince them that investing in sock puppets at a $100,000,000 valuation is a pretty good idea. Anyway, getting good software over the course of 10 years assumes that for at least 8 of those years, you're getting good feedback from your customers, and good innovations from your competitors that you can copy, and good ideas from all the people that come to work for you because they believe that your version 1.0 is promising. You have to release early, incomplete versions -- but don't overhype them or advertise them on the Super Bowl, because they're just not that good, no matter how smart you are. Mistake number 6. Too-frequent upgrades (a.k.a. the Corel Syndrome). At the beginning, when you're adding new features and you don't have a lot of existing customers, you'll be able to release a new version every 6 months or so, and people will love you for the new features. After four or five releases like that, you have to slow down, or your existing customers will stop upgrading. They'll skip releases because they don't want the pain or expense of upgrading. Once they skip a release, they'll start to convince themselves that, hey, they don't always need the latest and greatest. I used Corel PhotoPaint 6.0 for 5 years. Yes, I know, it had all kinds of off-by-one bugs, but I knew all the off-by-one bugs and compensated by always dragging the selection one pixel to the right of where I thought it should be. Make a ten year plan. Make sure you can survive for 10 years, because the software products that bring in a billion dollars a year all took that long. Don't get too hung up on your version 1 and don't think, for a minute, that you have any hope of reaching large markets with your first version. Good software, like wine , takes time. Have you been wondering about Distributed Version Control? It has been a huge productivity boon for us, so I wrote Hg Init, a Mercurial tutorial -check it out! Next: Hard-assed Bug Fixin' Want to know more? You're reading Joel on Software , stuffed with years and years of completely raving mad articles about software development, managing software teams, designing user interfaces, running successful software companies, and rubber duckies. About the author. I'm Joel Spolsky, co-founder of Trello and Fog Creek Software , and CEO of Stack Exchange . More about me.