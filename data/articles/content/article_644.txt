Welcome to the Angular 2 Style Guide Purpose If you are looking for an opinionated style guide for syntax, conventions, and structuring Angular applications, then step right in. The purpose of this style guide is to provide guidance on building Angular applications by showing the conventions we use and, more importantly, why we choose them. Style Vocabulary Each guideline describes either a good or bad practice, and all have a consistent presentation. The wording of each guideline indicates how strong the recommendation is. Do is one that should always be followed. Always might be a bit too strong of a word. Guidelines that literally should always be followed are extremely rare. On the other hand, we need a really unusual case for breaking a Do guideline. Consider guidelines should generally be followed. If you fully understand the meaning behind the guideline and have a good reason to deviate, then do so. Please strive to be consistent. Avoid indicates something we should almost never do. Code examples to avoid have an unmistakeable red header. File Structure Conventions Some code examples display a file that has one or more similarly named companion files. (e.g. hero.component.ts and hero.component.html). The guideline will use the shortcut hero.component.ts|html|css|spec to represent those various files. Using this shortcut makes this guide's file structures easier to read and more terse. Table of Contents Single Responsibility We apply the Single Responsibility Principle to all Components, Services, and other symbols we create. This helps make our app cleaner, easier to read and maintain, and more testable. Rule of One Style 01-01 Do define one thing (e.g. service or component) per file. Consider limiting files to 400 lines of code. Why? One component per file makes it far easier to read, maintain, and avoid collisions with teams in source control. Why? One component per file avoids hidden bugs that often arise when combining components in a file where they may share variables, create unwanted closures, or unwanted coupling with dependencies. Why? A single component can be the default export for its file which facilitates lazy loading with the Component Router. The key is to make the code more reusable, easier to read, and less mistake prone. The following negative example defines the AppComponent , bootstraps the app, defines the Hero model object, and loads heroes from the server ... all in the same file. Don't do this . AVOID: app/heroes/hero.component.ts /* avoid */ import { bootstrap } from '@angular/platform-browser-dynamic'; import { Component, OnInit } from '@angular/core'; class Hero { id: number; name: string; } @Component({ selector: 'my-app', template: ` <h1>{<!-- -->{title}}</h1> <pre>{<!-- -->{heroes | json}}</pre> `, styleUrls: ['app/app.component.css'] }) class AppComponent implements OnInit { title = 'Tour of Heroes'; heroes: Hero[] = []; ngOnInit() { getHeroes().then(heroes => this.heroes = heroes); } } bootstrap(AppComponent, []); const HEROES: Hero[] = [ {id: 1, name: 'Bombasto'}, {id: 2, name: 'Tornado'}, {id: 3, name: 'Magneta'}, ]; function getHeroes(): Promise<Hero[]> { return Promise.resolve(HEROES); // TODO: get hero data from the server; } Better to redistribute the component and supporting activities into their own dedicated files. import { bootstrap } from '@angular/platform-browser-dynamic'; import { AppComponent } from './app.component'; bootstrap(AppComponent, []); // app.component.ts import { Component } from '@angular/core'; import { HeroesComponent } from './heroes/heroes.component'; import { HeroService } from './heroes/shared/hero.service'; @Component({ selector: 'toh-app', template: ` <toh-heroes></toh-heroes> `, styleUrls: ['app/app.component.css'], directives: [HeroesComponent], providers: [HeroService] }) export class AppComponent { } import { Component, OnInit } from '@angular/core'; import { Hero } from './shared/hero.model'; import { HeroService } from './shared/hero.service'; @Component({ selector: 'toh-heroes', template: ` <pre>{<!-- -->{heroes | json}}</pre> ` }) export class HeroesComponent implements OnInit { heroes: Hero[] = []; constructor(private heroService: HeroService) {} ngOnInit() { this.heroService.getHeroes() .then(heroes => this.heroes = heroes); } } import { Injectable } from '@angular/core'; import { HEROES } from './mock-heroes'; @Injectable() export class HeroService { getHeroes() { return Promise.resolve(HEROES); } } export class Hero { id: number; name: string; } import { Hero } from './hero.model'; export const HEROES: Hero[] = [ {id: 1, name: 'Bombasto'}, {id: 2, name: 'Tornado'}, {id: 3, name: 'Magneta'}, ]; As the app grows, this rule becomes even more important. Back to top Small Functions Style 01-02 Do define small functions Consider limiting to no more than 75 lines. Why? Small functions are easier to test, especially when they do one thing and serve one purpose. Why? Small functions promote reuse. Why? Small functions are easier to read. Why? Small functions are easier to maintain. Why? Small functions help avoid hidden bugs that come with large functions that share variables with external scope, create unwanted closures, or unwanted coupling with dependencies. Back to top Naming Naming conventions are hugely important to maintainability and readability. This guide recommends naming conventions for the file name and the symbol name. General Naming Guidelines Style 02-01 Do use consistent names for all symbols. Why? Naming conventions help provide a consistent way to find content at a glance. Consistency within the project is vital. Consistency with a team is important. Consistency across a company provides tremendous efficiency. Why? The naming conventions should simply help us find our code faster and make it easier to understand. Back to top Separate File Names with Dots and Dashes Style 02-02 Do use dashes to separate words. Do use dots to separate the descriptive name from the type. Do use conventional suffixes for the types including *.service.ts , *.component.ts , *.pipe.ts . Invent other suffixes where desired, but take care in having too many. Why? Provides a consistent way to quickly identify what is in the file. Why? Provides a consistent way to quickly find a specific file using an editor or IDE's fuzzy search techniques. Why? Provides pattern matching for any automated tasks. Back to top Components and Directives Style 02-03 Do use consistent names for all assets named after what they represent. Do use upper camel case for symbols. Match the name of the symbol to the naming of the file. Do append the symbol name with the suffix that it represents. Why? Provides a consistent way to quickly identify and reference assets. Why? Upper camel case is conventional for identifying objects that can be instantiated using a constructor. Back to top Service Names Style 02-04 Do use consistent names for all services named after their feature. Do use upper camel case for services. Why? Provides a consistent way to quickly identify and reference services. Back to top Bootstrapping Style 02-05 Why? Follows a consistent convention for the startup logic of an app. Why? Follows a familiar convention from other technology platforms. Back to top Directive Selectors Style 02-06 Do Use lower camel case for naming the selectors of our directives. Why? Keeps the names of the properties defined in the directives that are bound to the view consistent with the attribute names. Why? The Angular 2 HTML parser is case sensitive and will recognize lower camel case. Back to top Custom Prefix for Components Style 02-07 Do use a custom prefix for the selector of our components. For example, the prefix toh represents from T our o f H eroes and the prefix admin represents an admin feature area. Do use a prefix that identifies the feature area or the app itself. Why? Prevents name collisions. Why? Makes it easier to promote and share our feature in other apps. Why? Our Components and elements are easily identified. AVOID: app/heroes/hero.component.ts /* avoid */ // HeroComponent is in the Tour of Heroes feature @Component({ selector: 'hero' }) export class HeroComponent {} AVOID: app/users/users.component.ts /* avoid */ // UsersComponent is in an Admin feature @Component({ selector: 'users' }) export class UsersComponent {} app/heroes/hero.component.ts @Component({ selector: 'toh-hero' }) export class HeroComponent {} app/users/users.component.ts @Component({ selector: 'admin-users' }) export class UsersComponent {} Custom Prefix for Directives Style 02-08 Do use a custom prefix for the selector of our directives (for instance below we use the prefix toh from T our o f H eroes). Why? Prevents name collisions. Why? Our Directives are easily identified. AVOID: app/shared/validate.directive.ts /* avoid */ @Directive({ selector: '[validate]' }) export class ValidateDirective {} app/shared/validate.directive.ts @Directive({ selector: '[tohValidate]' }) export class ValidateDirective {} Back to top Pipe Names Style 02-09 Do use consistent names for all pipes, named after their feature. Why? Provides a consistent way to quickly identify and reference pipes. Back to top Unit Test File Names Style 02-10 Do name test specification files the same as the component they test. Why? Provides a consistent way to quickly identify tests. Why? Provides pattern matching for karma or other test runners. Back to top End to End Test File Names Style 02-11 Why? Provides a consistent way to quickly identify end-to-end tests. Why? Provides pattern matching for test runners and build automation. Back to top Coding Conventions Have consistent set of coding, naming, and whitespace conventions. Classes Style 03-01 Do use upper camel case when naming classes. Why? Follows conventional thinking for class names. Why? Classes can be instantiated and construct an instance. We often use upper camel case to indicate a constructable asset. AVOID: app/shared/exception.service.ts /* avoid */ export class exceptionService { constructor() { } } app/shared/exception.service.ts export class ExceptionService { constructor() { } } Back to top Constants Style 03-02 Do use uppercase with underscores when naming constants. Why? Follows conventional thinking for constants. Why? Constants can easily be identified. AVOID: app/shared/data.service.ts /* avoid */ export const heroesUrl = 'api/heroes'; export const villainsUrl = 'api/villains'; app/shared/data.service.ts export const HEROES_URL = 'api/heroes'; export const VILLAIN_URL = 'api/villains'; Back to top Interfaces Style 03-03 Do name an interface using upper camel case. Why? When we use types, we can often simply use the class as the type. AVOID: app/shared/hero-collector.service.ts /* avoid */ import { Injectable } from '@angular/core'; import { IHero } from './hero.model.avoid'; @Injectable() export class HeroCollectorService { hero: IHero; constructor() { } } app/shared/hero-collector.service.ts import { Injectable } from '@angular/core'; import { Hero } from './hero.model'; @Injectable() export class HeroCollectorService { hero: Hero; constructor() { } } Back to top Properties and Methods Style 03-04 Do use lower camel case to name properties and methods. Avoid prefixing private properties and methods with an underscore. Why? Follows conventional thinking for properties and methods. Why? JavaScript lacks a true private property or method. Why? TypeScript tooling makes it easy to identify private vs public properties and methods. AVOID: app/shared/toast/toast.service.ts /* avoid */ import { Injectable } from '@angular/core'; @Injectable() export class ToastService { message: string; private _toastCount: number; hide() { this._toastCount--; this._log(); } show() { this._toastCount++; this._log(); } private _log() { console.log(this.message); } } app/shared/toast/toast.service.ts import { Injectable } from '@angular/core'; @Injectable() export class ToastService { message: string; private toastCount: number; hide() { this.toastCount--; this.log(); } show() { this.toastCount++; this.log(); } private log() { console.log(this.message); } } Back to top Import Destructuring Spacing Style 03-05 Why? Whitespace makes it easier to read the imports. AVOID: app/+heroes/shared/hero.service.ts /* avoid */ import {Injectable} from '@angular/core'; import {Http, Response} from '@angular/http'; import {Hero} from './hero.model'; import {ExceptionService, SpinnerService, ToastService} from '../../shared'; app/+heroes/shared/hero.service.ts import { Injectable } from '@angular/core'; import { Http, Response } from '@angular/http'; import { Hero } from './hero.model'; import { ExceptionService, SpinnerService, ToastService } from '../../shared'; Back to top Import Line Spacing Style 03-06 Do leave one empty line between third party imports and imports of code we created. Do list import lines alphabetized by the module. Do list destructured imported assets alphabetically. Why? The empty line makes it easy to read and locate imports. Why? Alphabetizing makes it easier to read and locate imports. AVOID: app/+heroes/shared/hero.service.ts /* avoid */ import { ExceptionService, SpinnerService, ToastService } from '../../shared'; import { Http, Response } from '@angular/http'; import { Injectable } from '@angular/core'; import { Hero } from './hero.model'; app/+heroes/shared/hero.service.ts import { Injectable } from '@angular/core'; import { Http, Response } from '@angular/http'; import { Hero } from './hero.model'; import { ExceptionService, SpinnerService, ToastService } from '../../shared'; Back to top Application Structure Have a near term view of implementation and a long term vision. Start small but keep in mind where the app is heading down the road. All of the app's code goes in a folder named app . All content is 1 feature per file. Each component, service, and pipe is in its own file. All 3rd party vendor scripts are stored in another folder and not in the app folder. We didn't write them and we don't want them cluttering our app. Use the naming conventions for files in this guide. Back to top LIFT Style 04-01 Do define the structure to follow these four basic guidelines, listed in order of importance. Why? LIFT Provides a consistent structure that scales well, is modular, and makes it easier to increase developer efficiency by finding code quickly. Another way to check our app structure is to ask ourselves: How quickly can we open and work in all of the related files for a feature? Back to top Locate Style 04-02 Do make locating our code intuitive, simple and fast. Why? We find this to be super important for a project. If we cannot find the files we need to work on quickly, we will not be able to work as efficiently as possible, and the structure will need to change. We may not know the file name or where its related files are, so putting them in the most intuitive locations and near each other saves a ton of time. A descriptive folder structure can help with this. Back to top Identify Style 04-03 Do name the file such that we instantly know what it contains and represents. Do be descriptive with file names and keep the contents of the file to exactly one component. Avoid files with multiple components, multiple services, or a mixture. Why? We spend less time hunting and pecking for code, and become more efficient. If this means we want longer file names, then so be it. There are deviations of the 1 per file rule when we have a set of very small features that are all related to each other, as they are still easily identifiable. Back to top Flat Style 04-04 Do keep a flat folder structure as long as possible. Consider creating fodlers when we get to seven or more files. Why? Nobody wants to search seven levels of folders to find a file. In a folder structure there is no hard and fast number rule, but when a folder has seven to ten files, that may be time to create subfolders. We base it on our comfort level. Use a flatter structure until there is an obvious value (to help the rest of LIFT) in creating a new folder. Back to top T-DRY (Try to be DRY) Style 04-05 Do be DRY (Don't Repeat Yourself) Avoid being so DRY that we sacrifice readability. Back to top Overall Structural Guidelines Style 04-06 Do start small but keep in mind where the app is heading down the road. Do have a near term view of implementation and a long term vision. Why? Helps us keep the app structure small and easy to maintain in the early stages, while being easy to evolve as the app grows. Overall Folder and File Structure While we prefer our Components to be in their own dedicated folder, another option for small apps is to keep Components flat (not in a dedicated folder). This adds up to four files to the existing folder, but also reduces the folder nesting. Be consistent. Back to top Style 04-07 Why? Separates shared files from the components within a feature. Why? Makes it easier to locate shared files within a component feature. Back to top Folders-by-Feature Structure Style 04-08 Do create folders named for the feature they represent. Why? A developer can locate the code, identify what each file represents at a glance, the structure is as flat as it can be, and there is no repetitive nor redundant names. Why? The LIFT guidelines are all covered. Why? Helps reduce the app from becoming cluttered through organizing the content and keeping them aligned with the LIFT guidelines. Why? When there are a lot of files (e.g. 10+) locating them is easier with a consistent folder structures and more difficult in flat structures. Below is an example of a small app with folders per component. Back to top Layout Components Style 04-09 Why? We need a place to host our layout for our app. Our navigation bar, footer, and other aspects of the app that are needed for the entire app. Why? Organizes all layout in a consistent place re-used throughout the application. Folder for Layout Components Back to top Create and Import Barrels Style 04-10 Do create a file that imports, aggregates, and re-exports items. We call this technique a barrel . Why? A barrel aggregates many imports into a single import. Why? A barrel reduces the number of imports a file may need. Why? A barrel shortens import statements. export * from './config'; export * from './entity.service'; export * from './exception.service'; export * from './filter-text'; export * from './init-caps.pipe'; export * from './modal'; export * from './nav'; export * from './spinner'; export * from './toast'; export * from './filter-text.component'; export * from './filter-text.service'; export * from './modal.component'; export * from './modal.service'; export * from './nav.component'; export * from './spinner.component'; export * from './spinner.service'; export * from './toast.component'; export * from './toast.service'; AVOID: app/+heroes/heroes.component.ts /* avoid */ import { Component, OnInit } from '@angular/core'; import { CONFIG } from '../shared/config'; import { EntityService } from '../shared/entity.service'; import { ExceptionService } from '../shared/exception.service'; import { FilterTextComponent } from '../shared/filter-text/filter-text.component'; import { InitCapsPipe } from '../shared/init-caps.pipe'; import { SpinnerService } from '../shared/spinner/spinner.service'; import { ToastService } from '../shared/toast/toast.service'; @Component({ selector: 'toh-heroes', templateUrl: 'app/+heroes/heroes.component.html' }) export class HeroesComponent implements OnInit { constructor() { } ngOnInit() { } } app/+heroes/heroes.component.ts import { Component, OnInit } from '@angular/core'; import { CONFIG, EntityService, ExceptionService, FilterTextComponent, InitCapsPipe, SpinnerService, ToastService } from '../shared'; @Component({ selector: 'toh-heroes', templateUrl: 'app/+heroes/heroes.component.html' }) export class HeroesComponent implements OnInit { constructor() { } ngOnInit() { } } Back to top Lazy Loaded Folders Style 04-11 A distinct application feature or workflow may be lazy loaded or loaded on demand rather than when the application starts. Do put the contents of lazy loaded features in a lazy loaded folder . A typical lazy loaded folder contains a routing component , its child components, and their related assets and modules. Why? The folder makes it easy to identify and isolate the feature content. Back to top Prefix Lazy Loaded Folders with + Style 04-12 Do prefix the name of a lazy loaded folder with a (+) e.g., +dashboard/ . Why? Lazy loaded code paths are easily distinguishable from non lazy loaded paths. Why? If we see an import path that contains a + , we can quickly refactor to use lazy loading. Back to top Never Directly Import Lazy Loaded Folders Style 04-13 Avoid allowing modules in sibling and parent folders to directly import a module in a lazy loaded feature . Why? Directly importing a module loads it immediately when our intention is to load it on demand. AVOID: app/app.component.ts import { HeroesComponent } from './+heroes'; Back to top Lazy Loaded Folders May Import From a Parent Style 04-14 Do allow lazy loaded modules to import a module from a parent folder. Why? A parent module has already been loaded by the time the lazy loaded module imports it. app/heroes/heroes.component.ts import { Logger } from '../shared/logger.service'; Back to top Use Component Router to Lazy Load Style 04-15 Do use the Component Router to lazy load routable features. Why? That's the easiest way to load a module on demand. Back to top Components Components Selector Naming Style 05-02 Why? Keeps the element names consistent with the specification for Custom Elements . AVOID: app/heroes/shared/hero-button/hero-button.component.ts /* avoid */ @Component({ selector: 'tohHeroButton' }) export class HeroButtonComponent {} @Component({ selector: 'toh-hero-button' }) export class HeroButtonComponent {} <toh-hero-button></toh-hero-button> Back to top Components as Elements Style 05-03 Do define Components as elements via the selector. Why? Components have templates containing HTML and optional Angular template syntax. They are most associated with putting content on a page, and thus are more closely aligned with elements. Why? Components are derived from Directives, and thus their selectors can be elements, attributes, or other selectors. Defining the selector as an element provides consistency for components that represent content with a template. Why? It is easier to recognize that a symbol is a component vs a directive by looking at the template's html. AVOID: app/heroes/hero-button/hero-button.component.ts /* avoid */ @Component({ selector: '[tohHeroButton]' }) export class HeroButtonComponent {} AVOID: app/heroes/hero-button/hero-button.component.html <!-- avoid --> <div tohHeroButton></div> @Component({ selector: 'toh-hero-button' }) export class HeroButtonComponent {} <toh-hero-button></toh-hero-button> Back to top Extract Template and Styles to Their Own Files Style 05-04 Do extract templates and styles into a separate file, when more than 3 lines. Why? Syntax hints for inline templates in ( .js and .ts) code files are not supported by some editors. Why? A component file's logic is easier to read when not mixed with inline template and styles. AVOID: app/heroes/heroes.component.ts /* avoid */ @Component({ selector: 'toh-heroes', template: ` <div> <h2>My Heroes</h2> <ul class="heroes"> <li *ngFor="let hero of heroes"> <span class="badge">{<!-- -->{hero.id}}</span> {<!-- -->{hero.name}} </li> </ul> <div *ngIf="selectedHero"> <h2>{<!-- -->{selectedHero.name | uppercase}} is my hero</h2> </div> </div> `, styleUrls: [` .heroes { margin: 0 0 2em 0; list-style-type: none; padding: 0; width: 15em; } .heroes li { cursor: pointer; position: relative; left: 0; background-color: #EEE; margin: .5em; padding: .3em 0; height: 1.6em; border-radius: 4px; } .heroes .badge { display: inline-block; font-size: small; color: white; padding: 0.8em 0.7em 0 0.7em; background-color: #607D8B; line-height: 1em; position: relative; left: -1px; top: -4px; height: 1.8em; margin-right: .8em; border-radius: 4px 0 0 4px; } `] }) export class HeroesComponent implements OnInit { heroes: Hero[]; selectedHero: Hero; ngOnInit() {} } @Component({ selector: 'toh-heroes', templateUrl: 'heroes.component.html', styleUrls: ['heroes.component.css'] }) export class HeroesComponent implements OnInit { heroes: Hero[]; selectedHero: Hero; ngOnInit() { } } <div> <h2>My Heroes</h2> <ul class="heroes"> <li *ngFor="let hero of heroes"> <span class="badge">{<!-- -->{hero.id}}</span> {<!-- -->{hero.name}} </li> </ul> <div *ngIf="selectedHero"> <h2>{<!-- -->{selectedHero.name | uppercase}} is my hero</h2> </div> </div> .heroes { margin: 0 0 2em 0; list-style-type: none; padding: 0; width: 15em; } .heroes li { cursor: pointer; position: relative; left: 0; background-color: #EEE; margin: .5em; padding: .3em 0; height: 1.6em; border-radius: 4px; } .heroes .badge { display: inline-block; font-size: small; color: white; padding: 0.8em 0.7em 0 0.7em; background-color: #607D8B; line-height: 1em; position: relative; left: -1px; top: -4px; height: 1.8em; margin-right: .8em; border-radius: 4px 0 0 4px; } Back to top Decorate Input and Output Properties Inline Style 05-12 Do place the @Input() or @Output() on the same line as the property they decorate. Why? It is easier and more readable to identify which properties in a class are inputs or outputs. Why? If we ever need to rename the property or event name associated to or we can modify it on a single place. Why? The metadata declaration attached to the directive is shorter and thus more readable. Why? Placing the decorator on the same line makes for shorter code and still easily identifies the property as an input or output. AVOID: app/heroes/shared/hero-button/hero-button.component.ts /* avoid */ @Component({ selector: 'toh-hero-button', template: `<button></button>`, inputs: [ 'label' ], outputs: [ 'change' ] }) export class HeroButtonComponent { change = new EventEmitter<any>(); label: string; } app/heroes/shared/hero-button/hero-button.component.ts @Component({ selector: 'toh-hero-button', template: `<button>OK</button>` }) export class HeroButtonComponent { @Output() change = new EventEmitter<any>(); @Input() label: string; } Back to top Avoid Renaming Inputs and Outputs Style 05-13 Avoid renaming inputs and outputs, when possible. Why? May lead to confusion when the output or the input properties of a given directive are named a given way but exported differently as a public API. AVOID: app/heroes/shared/hero-button/hero-button.component.ts /* avoid */ @Component({ selector: 'toh-hero-button', template: `<button>{<!-- -->{label}}</button>` }) export class HeroButtonComponent { @Output('changeEvent') change = new EventEmitter<any>(); @Input('labelAttribute') label: string; } AVOID: app/app.component.html <!-- avoid --> <toh-hero-button labelAttribute="OK" (changeEvent)="doSomething()"> </toh-hero-button> @Component({ selector: 'toh-hero-button', template: `<button>{<!-- -->{label}}</button>` }) export class HeroButtonComponent { @Output() change = new EventEmitter<any>(); @Input() label: string; } <toh-hero-button label="OK" (change)="doSomething()"> </toh-hero-button> Back to top Member Sequence Style 05-14 Do place properties up top followed by methods. Do place private members after public members, alphabetized. Why? Placing members in a consistent sequence makes it easy to read and helps we instantly identify which members of the component serve which purpose. AVOID: app/shared/toast/toast.component.ts /* avoid */ export class ToastComponent implements OnInit { private defaults = { title: '', message: 'May the Force be with You' }; message: string; title: string; private toastElement: any; ngOnInit() { this.toastElement = document.getElementById('toh-toast'); } // private methods private hide() { this.toastElement.style.opacity = 0; window.setTimeout(() => this.toastElement.style.zIndex = 0, 400); } activate(message = this.defaults.message, title = this.defaults.title) { this.title = title; this.message = message; this.show(); } private show() { console.log(this.message); this.toastElement.style.opacity = 1; this.toastElement.style.zIndex = 9999; window.setTimeout(() => this.hide(), 2500); } } app/shared/toast/toast.component.ts export class ToastComponent implements OnInit { // public properties message: string; title: string; // private fields private defaults = { title: '', message: 'May the Force be with You' }; private toastElement: any; // public methods activate(message = this.defaults.message, title = this.defaults.title) { this.title = title; this.message = message; this.show(); } ngOnInit() { this.toastElement = document.getElementById('toh-toast'); } // private methods private hide() { this.toastElement.style.opacity = 0; window.setTimeout(() => this.toastElement.style.zIndex = 0, 400); } private show() { console.log(this.message); this.toastElement.style.opacity = 1; this.toastElement.style.zIndex = 9999; window.setTimeout(() => this.hide(), 2500); } } Back to top Put Logic in Services Style 05-15 Do limit logic in a component to only that required for the view. All other logic should be delegated to services. Do move reusable logic to services and keep components simple and focused on their intended purpose. Why? Logic may be reused by multiple components when placed within a service and exposed via a function. Why? Logic in a service can more easily be isolated in a unit test, while the calling logic in the component can be easily mocked. Why? Removes dependencies and hides implementation details from the component. Why? Keeps the component slim, trim, and focused. AVOID: app/heroes/hero-list/hero-list.component.ts /* avoid */ import { OnInit } from '@angular/core'; import { Http, Response } from '@angular/http'; import { Observable } from 'rxjs/Observable'; import { Hero } from '../shared/hero.model'; const heroesUrl = ' '; export class HeroListComponent implements OnInit { heroes: Hero[]; constructor(private http: Http) {} getHeroes() { this.heroes = []; this.http.get(heroesUrl) .map((response: Response) => <Hero[]>response.json().data) .catch(this.catchBadResponse) .finally(() => this.hideSpinner()) .subscribe((heroes: Hero[]) => this.heroes = heroes); } ngOnInit() { this.getHeroes(); } private catchBadResponse(err: any, source: Observable<any>) { // log and handle the exception return new Observable(); } private hideSpinner() { // hide the spinner } } app/heroes/hero-list/hero-list.component.ts import { Component, OnInit } from '@angular/core'; import { Hero, HeroService } from '../shared/index'; @Component({ selector: 'toh-hero-list', template: `...` }) export class HeroListComponent implements OnInit { heroes: Hero[]; constructor(private heroService: HeroService) {} getHeros() { this.heroes = []; this.heroService.getHeroes() .subscribe(heroes => this.heroes = heroes); } ngOnInit() { this.getHeros(); } } Back to top Don't Prefix Output Properties Style 05-16 Why? This is consistent with built-in events such as button clicks. Why? Angular allows for an alternative syntax on-* . If the event itself was prefixed with on this would result in an on-onEvent binding expression. AVOID: app/heroes/hero.component.ts /* avoid */ @Component({ selector: 'toh-hero', template: `...` }) export class HeroComponent { @Output() onSavedTheDay = new EventEmitter<boolean>(); } AVOID: app/app.component.html <!-- avoid --> <toh-hero (onSavedTheDay)="onSavedTheDay($event)"></toh-hero> export class HeroComponent { @Output() savedTheDay = new EventEmitter<boolean>(); } <toh-hero (savedTheDay)="onSavedTheDay($event)"></toh-hero> Back to top Put Presentation Logic in the Component Class Style 05-17 Do put presentation logic in the Component class, and not in the template. Why? Logic will be contained in one place (the Component class) instead of being spread in two places. Why? Keeping the component's presentation logic in the class instead of the template improves testability, maintainability, and reusability. AVOID: app/heroes/hero-list/hero-list.component.ts /* avoid */ @Component({ selector: 'toh-hero-list', template: ` <section> Our list of heroes: <hero-profile *ngFor="let hero of heroes" [hero]="hero"> </hero-profile> Total powers: {<!-- -->{totalPowers}}<br> Average power: {<!-- -->{totalPowers / heroes.length}} </section> ` }) export class HeroListComponent { heroes: Hero[]; totalPowers: number; } app/heroes/hero-list/hero-list.component.ts @Component({ selector: 'toh-hero-list', template: ` <section> Our list of heroes: <hero-profile *ngFor="let hero of heroes" [hero]="hero"> </hero-profile> Total powers: {<!-- -->{totalPowers}}<br> Average power: {<!-- -->{avgPower}} </section> ` }) export class HeroListComponent { heroes: Hero[]; totalPowers: number; get avgPower() { return this.totalPowers / this.heroes.length; } } Back to top Directives Back to top Use Directives to Enhance an Existing Element Style 06-01 Do use attribute directives when you have presentation logic without a template. Why? Attributes directives don't have an associated template. Why? An element may have more than one attribute directive applied. app/shared/highlight.directive.ts @Directive({ selector: '[tohHighlight]' }) export class HighlightDirective { @HostListener('mouseover') onMouseEnter() { // do highlight work } } <div [tohHightlight]>Bombasta</div> Back to top Use HostListener and HostBinding Class Decorators Style 06-03 Do use @HostListener and @HostBinding instead of the host property of the @Directive and @Component decorators: Why? The property or method name associated with @HostBinding or respectively @HostListener should be modified only in a single place - in the directive's class. In contrast if we use host we need to modify both the property declaration inside the controller, and the metadata associated to the directive. Why? The metadata declaration attached to the directive is shorter and thus more readable. AVOID: app/shared/validate.directive.ts /* avoid */ @Directive({ selector: '[tohValidator]', host: { '(mouseenter)': 'onMouseEnter()', 'attr.role': 'button' } }) export class ValidatorDirective { role = 'button'; onMouseEnter() { // do work } } app/shared/validate.directive.ts @Directive({ selector: '[tohValidator]' }) export class ValidatorDirective { @HostBinding('attr.role') role = 'button'; @HostListener('mouseenter') onMouseEnter() { // do work } } Back to top Services Services are Singletons in Same Injector Style 07-01 Do use services as singletons within the same injector. Use them for sharing data and functionality. Why? Services are ideal for sharing methods across a feature area or an app. Why? Services are ideal for sharing stateful in-memory data. app/heroes/shared/hero.service.ts export class HeroService { constructor(private http: Http) { } getHeroes() { return this.http.get('api/heroes') .map((response: Response) => <Hero[]>response.json().data); } } Back to top Single Responsibility Style 07-02 Do create services with a single responsibility that is encapsulated by its context. Do create a new service once the service begins to exceed that singular purpose. Why? When a service has multiple responsibilities, it becomes difficult to test. Why? When a service has multiple responsibilities, every Component or Service that injects it now carries the weight of them all. Back to top Providing a Service Style 07-03 Do provide services to the Angular 2 injector at the top-most component where they will be shared. Why? The Angular 2 injector is hierarchical. Why? When providing the service to a top level component, that instance is shared and available to all child components of that top level component. Why? This is ideal when a service is sharing methods or state. Why? This is not ideal when two different components need different instances of a service. In this scenario it would be better to provide the service at the component level that needs the new and separate instance. import { Component } from '@angular/core'; import { HeroListComponent } from './heroes/hero-list.component'; import { HeroService } from './heroes/shared/hero.service'; @Component({ selector: 'toh-app', template: ` <toh-heroes></toh-heroes> `, directives: [HeroListComponent], providers: [HeroService] }) export class AppComponent {} BAD FILENAME: ../../../_fragments/style-guide/ts/07-03/app/heroes/hero-list/hero-list.component.ts.md Current path: docs,ts,latest,guide,style-guide PathToDocs: ../../../ Back to top Use the @Injectable() Class Decorator Style 07-04 Do use the @Injectable class decorator instead of the @Inject parameter decorator when using types as tokens for the dependencies of a service. Why? The Angular DI mechanism resolves all the dependencies of our services based on their types declared with the services' constructors. Why? When a service accepts only dependencies associated with type tokens, the @Injectable() syntax is much less verbose compared to using @Inject() on each individual constructor parameter. AVOID: app/heroes/shared/hero-arena.service.ts /* avoid */ export class HeroArena { constructor( @Inject(HeroService) private heroService: HeroService, @Inject(Http) private http: Http) {} } app/heroes/shared/hero-arena.service.ts @Injectable() export class HeroArena { constructor( private heroService: HeroService, private http: Http) {} } Back to top Data Services Separate Data Calls Style 08-01 Do refactor logic for making data operations and interacting with data to a service. Do make data services responsible for XHR calls, local storage, stashing in memory, or any other data operations. Why? The component's responsibility is for the presentation and gathering of information for the view. It should not care how it gets the data, just that it knows who to ask for it. Separating the data services moves the logic on how to get it to the data service, and lets the component be simpler and more focused on the view. Why? This makes it easier to test (mock or real) the data calls when testing a component that uses a data service. Back to top Lifecycle Hooks Use Lifecycle Hooks to tap into important events exposed by Angular. Back to top Implement Lifecycle Hooks Interfaces Style 09-01 Do implement the lifecycle hook interfaces. Why? We get strong typing for the method signatures. The compiler and editor can call our attention to misspellings. AVOID: app/heroes/shared/hero-button/hero-button.component.ts /* avoid */ @Component({ selector: 'toh-hero-button', template: `<button>OK<button>` }) export class HeroButtonComponent { onInit() { // mispelled console.log('The component is initialized'); } } app/heroes/shared/hero-button/hero-button.component.ts @Component({ selector: 'toh-hero-button', template: `<button>OK<button>` }) export class HeroButtonComponent implements OnInit { ngOnInit() { console.log('The component is initialized'); } } Back to top Routing Client-side routing is important for creating a navigation flow between a component tree hierarchy, and composing components that are made of many other child components. Back to top Component Router Style 10-01 Do separate route configuration into a routing component file, also known as a component router. Do focus the logic in the component router to the routing aspects and its target components. Do extract other logic to services and other components. Why? A component that handles routing is known as the component router, thus this follows the Angular 2 routing pattern. import { Component } from '@angular/core'; import { RouteConfig, ROUTER_DIRECTIVES, ROUTER_PROVIDERS } from '@angular/router'; import { NavComponent } from './shared/nav/nav.component'; import { DashboardComponent } from './dashboard/dashboard.component'; import { HeroesComponent } from './heroes/heroes.component'; import { HeroService } from './heroes/shared/hero.service'; @Component({ selector: 'toh-app', templateUrl: 'app/app.component.html', styleUrls: ['app/app.component.css'], directives: [ROUTER_DIRECTIVES, NavComponent], providers: [ ROUTER_PROVIDERS, HeroService ] }) @RouteConfig([ { path: '/dashboard', name: 'Dashboard', component: DashboardComponent, useAsDefault: true }, { path: '/heroes/...', name: 'Heroes', component: HeroesComponent }, ]) export class AppComponent {} Back to top Appendix Useful tools and tips for Angular 2. Back to top Codelyzer Style A-01 Consider adjusting the rules in codelyzer to suit your needs. Back to top File Templates and Snippets Style A-02 Do use file templates or snippets to help follow consistent styles and patterns. Here are templates and/or snippets for some of the web development editors and IDEs. Back to top