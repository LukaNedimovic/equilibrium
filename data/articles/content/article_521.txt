Table of Contents Fundamentals Clarity at the point of use is your most important goal. Entities such as methods and properties are declared only once but used repeatedly. Design APIs to make those uses clear and concise. When evaluating a design, reading a declaration is seldom sufficient; always examine a use case to make sure it looks clear in context. Clarity is more important than brevity. Although Swift code can be compact, it is a non-goal to enable the smallest possible code with the fewest characters. Brevity in Swift code, where it occurs, is a side-effect of the strong type system and features that naturally reduce boilerplate. If you are having trouble describing your API's functionality in simple terms, you may have designed the wrong API. Begin with a summary that describes the entity being declared. Often, an API can be completely understood from its declaration and its summary. Focus on the summary ; it's the most important part. Many excellent documentation comments consist of nothing more than a great summary. Use a single sentence fragment if possible, ending with a period. Do not use a complete sentence. Describe what a function or method does and what it returns , omitting null effects and Void returns: Note: in rare cases like popFirst above, the summary is formed of multiple sentence fragments separated by semicolons. Describe what a subscript accesses : Describe what an initializer creates : For all other declarations, describe what the declared entity is . Optionally, continue with one or more paragraphs and bullet items. Paragraphs are separated by blank lines and use complete sentences. /// Writes the textual representation of each <span class="graphic">←</span><span class="commentary"> Summary</span> /// element of `items` to the standard output. /// <span class="graphic">←</span><span class="commentary"> Blank line</span> /// The textual representation for each item `x` <span class="graphic">←</span><span class="commentary"> Additional discussion</span> /// is generated by the expression `String(x)`. /// /// - **Parameter separator**: text to be printed <span class="graphic">⎫</span> /// between items. <span class="graphic">⎟</span> /// - **Parameter terminator**: text to be printed <span class="graphic">⎬</span><span class="commentary"> <a href=" section</a></span> /// at the end. <span class="graphic">⎟</span> /// <span class="graphic">⎭</span> /// - **Note**: To print without a trailing <span class="graphic">⎫</span> /// newline, pass `terminator: ""` <span class="graphic">⎟</span> /// <span class="graphic">⎬</span><span class="commentary"> <a href=" commands</a></span> /// - **SeeAlso**: `CustomDebugStringConvertible`, <span class="graphic">⎟</span> /// `CustomStringConvertible`, `debugPrint`. <span class="graphic">⎭</span> public func print < Target : OutputStreamType > ( items : Any ... , separator : String = " " , terminator : String = " \n " ) Use recognized symbol documentation markup elements to add information beyond the summary, whenever appropriate. Know and use recognized bullet items with symbol command syntax . Popular development tools such as Xcode give special treatment to bullet items that start with the following keywords: Naming Include all the words needed to avoid ambiguity for a person reading code where the name is used. Omit needless words. Every word in a name should convey salient information at the use site. More words may be needed to clarify intent or disambiguate meaning, but those that are redundant with information the reader already possesses should be omitted. In particular, omit words that merely repeat type information. In this case, the word Element adds nothing salient at the call site. This API would be better: Occasionally, repeating type information is necessary to avoid ambiguity, but in general it is better to use a word that describes a parameter's role rather than its type. See the next item for details. Name variables, parameters, and associated types according to their roles, rather than their type constraints. Repurposing a type name in this way fails to optimize clarity and expressivity. Instead, strive to choose a name that expresses the entity's role . If an associated type is so tightly bound to its protocol constraint that the protocol name is the role, avoid collision by appending Type to the associated type name: Compensate for weak type information to clarify a parameter's role. Especially when a parameter type is NSObject , Any , AnyObject , or a fundamental type such Int or String , type information and context at the point of use may not fully convey intent. In this example, the declaration may be clear, but the use site is vague. To restore clarity, precede each weakly typed parameter with a noun describing its role : Strive for Fluent Usage Prefer method and function names that make use sites form grammatical English phrases. It is acceptable for fluency to degrade after the first argument or two when those arguments are not central to the call's meaning: Begin names of factory methods with " make ", e.g. x.makeIterator() . Initializer and factory method calls should form a phrase that does not include the first argument, e.g. x.makeWidget(cogCount: 47) For example, the phrases implied by these calls do not include the first argument: In the following, the API author has tried to create grammatical continuity with the first argument. In practice, this guideline along with those for argument labels means the first argument will have a label unless the call is performing a full-width type conversion . Name functions and methods according to their side-effects Uses of Boolean methods and properties should read as assertions about the receiver when the use is nonmutating, e.g. x.isEmpty , line1.intersects(line2) . Protocols that describe what something is should read as nouns (e.g. Collection ). Protocols that describe a capability should be named using the suffixes able , ible , or ing (e.g. Equatable , ProgressReporting ). The names of other types, properties, variables, and constants should read as nouns. Use Terminology Well Term of Art noun - a word or phrase that has a precise, specialized meaning within a particular field or profession. Avoid obscure terms if a more common word conveys meaning just as well. Don't say "epidermis" if "skin" will serve your purpose. Terms of art are an essential communication tool, but should only be used to capture crucial meaning that would otherwise be lost. Stick to the established meaning if you do use a term of art. The only reason to use a technical term rather than a more common word is that it precisely expresses something that would otherwise be ambiguous or unclear. Therefore, an API should use the term strictly in accordance with its accepted meaning. Don't surprise an expert : anyone already familiar with the term will be surprised and probably angered if we appear to have invented a new meaning for it. Don't confuse a beginner : anyone trying to learn the term is likely to do a web search and find its traditional meaning. Avoid abbreviations. Abbreviations, especially non-standard ones, are effectively terms-of-art, because understanding depends on correctly translating them into their non-abbreviated forms. The intended meaning for any abbreviation you use should be easily found by a web search. Embrace precedent. Don't optimize terms for the total beginner at the expense of conformance to existing culture. It is better to name a contiguous data structure Array than to use a simplified term such as List , even though a beginner might grasp of the meaning of List more easily. Arrays are fundamental in modern computing, so every programmer knows-or will soon learn-what an array is. Use a term that most programmers are familiar with, and their web searches and questions will be rewarded. Within a particular programming domain , such as mathematics, a widely precedented term such as sin(x) is preferable to an explanatory phrase such as verticalPositionOnUnitCircleAtOriginOfEndOfRadiusWithAngle(x) . Note that in this case, precedent outweighs the guideline to avoid abbreviations: although the complete word is sine , "sin( x )" has been in common use among programmers for decades, and among mathematicians for centuries. Conventions General Conventions Document the complexity of any computed property that is not O(1). People often assume that property access involves no significant computation, because they have stored properties as a mental model. Be sure to alert them when that assumption may be violated. Prefer methods and properties to free functions. Free functions are used only in special cases: When there's no obvious self : When the function is an unconstrained generic: When function syntax is part of the established domain notation: Follow case conventions. Names of types and protocols are UpperCamelCase . Everything else is lowerCamelCase . Acronyms and initialisms that commonly appear as all upper case in American English should be uniformly up- or down-cased according to case conventions: Other acronyms should be treated as ordinary words: Methods can share a base name when they share the same basic meaning or when they operate in distinct domains. For example, the following is encouraged, since the methods do essentially the same things: And since geometric types and collections are separate domains, this is also fine in the same program: However, these index methods have different semantics, and should have been named differently: Lastly, avoid "overloading on return type" because it causes ambiguities in the presence of type inference. Parameters Choose parameter names to serve documentation . Even though parameter names do not appear at a function or method's point of use, they play an important explanatory role. Take advantage of defaulted parameters when it simplifies common uses. Any parameter with a single commonly-used value is a candidate for a default. Default arguments improve readability by hiding irrelevant information. For example: can become the much simpler: Default arguments are generally preferable to the use of method families, because they impose a lower cognitive burden on anyone trying to understand the API. The above may not be simple, but it is much simpler than: Every member of a method family needs to be separately documented and understood by users. To decide among them, a user needs to understand all of them, and occasional surprising relationships-for example, foo(bar: nil) and foo() aren't always synonyms-make this a tedious process of ferreting out minor differences in mostly identical documentation. Using a single method with defaults provides a vastly superior programmer experience. Prefer to locate parameters with defaults toward the end of the parameter list. Parameters without defaults are usually more essential to the semantics of a method, and provide a stable initial pattern of use where methods are invoked. Argument Labels Omit all labels when arguments can't be usefully distinguished , e.g. min(number1, number2) , zip(sequence1, sequence2) . In initializers that perform full-width type conversions, omit the first argument label , e.g. Int64(someUInt32) The first argument should always be the source of the conversion. extension String { // Convert `x` into its textual representation in the given radix init(**_** x: BigInt, radix: Int = 10) <span class="commentary">← Note the initial underscore</span> } text = "The value is: " text += **String(veryLargeNumber)** text += " and in hexadecimal, it's" text += **String(veryLargeNumber, radix: 16)** In "narrowing" type conversions, though, a label that describes the narrowing is recommended. When the first argument forms part of a prepositional phrase , give it an argument label . The argument label should normally begin at the preposition , e.g. x.removeBoxes(havingLength: 12) . Otherwise, if the first argument forms part of a grammatical phrase, omit its label , appending any preceding words to the base name, e.g. x.addSubview(y) This guideline implies that if the first argument doesn't form part of a grammatical phrase, it should have a label. Note that it's important that the phrase convey the correct meaning. The following would be grammatical but would express the wrong thing. Note also that arguments with default values can be omitted, and in that case do not form part of a grammatical phrase, so they should always have labels. Label all other arguments . Special Instructions Label closure parameters and tuple members where they appear in your API. Take extra care with unconstrained polymorphism (e.g. Any , AnyObject , and unconstrained generic parameters) to avoid ambiguities in overload sets. For example, consider this overload set: These methods form a semantic family, and the argument types appear at first to be sharply distinct. However, when Element is Any , a single element can have the same type as a sequence of elements. To eliminate the ambiguity, name the second overload more explicitly. Notice how the new name better matches the documentation comment. In this case, the act of writing the documentation comment actually brought the issue to the API author's attention.