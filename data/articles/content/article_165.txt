Edit This Page The following instructions show you how to set up a simple, single node Kubernetes cluster using Docker. Here's a diagram of what the final result will look like: Prerequisites You need to have docker installed on one machine. Decide what Kubernetes version to use. Set the ${K8S_VERSION} variable to a released version of Kubernetes >= "1.2.0" Run it Note that --cluster-dns and --cluster-domain is used to deploy dns, feel free to discard them if dns is not needed. If you would like to mount an external device as a volume, add --volume=/dev:/dev to the command above. It may however, cause some problems described in #18230 This actually runs the kubelet, which in turn runs a pod that contains the other master components. Download kubectl At this point you should have a running Kubernetes cluster. You can test this by downloading the kubectl binary for ${K8S_VERSION} (look at the URL in the following links) and make it available by editing your PATH environment variable. ( OS X/amd64 ) ( OS X/386 ) ( linux/amd64 ) ( linux/386 ) ( linux/arm ) For example, OS X: wget { K8S_VERSION }/bin/darwin/amd64/kubectl chmod 755 kubectl PATH = $PATH:` pwd ` Linux: wget { K8S_VERSION }/bin/linux/amd64/kubectl chmod 755 kubectl PATH = $PATH:` pwd ` On OS X, to make the API server accessible locally, setup a ssh tunnel. docker-machine ssh `docker-machine active` -N -L 8080:localhost:8080 Setting up a ssh tunnel is applicable to remote docker hosts as well. (Optional) Create kubernetes cluster configuration: kubectl config set-cluster test-doc --server= kubectl config set-context test-doc --cluster= test-doc kubectl config use-context test-doc Test it out List the nodes in your cluster by running: This should print: NAME LABELS STATUS 127.0.0.1 kubernetes.io/hostname=127.0.0.1 Ready Run an application kubectl run nginx --image=nginx --port=80 Now run docker ps you should see nginx running. You may need to wait a few minutes for the image to get pulled. Expose it as a service kubectl expose deployment nginx --port=80 Run the following command to obtain the cluster local IP of this service we just created: Hit the webserver with this IP: kubectl get svc nginx --template={<!-- -->{.spec.clusterIP}} On OS X, since docker is running inside a VM, run the following command instead: shell docker-machine ssh `docker-machine active` curl $ip Deploy a DNS See here for instructions. Turning down your cluster Delete all the containers including the kubelet: Many of these containers run under the management of the kubelet binary, which attempts to keep containers running, even if they fail. So, in order to turn down the cluster, you need to first kill the kubelet container, and then any other containers. You may use docker kill $(docker ps -aq) , note this removes all containers running under Docker, so use with caution. Cleanup the filesystem: On OS X, first ssh into the docker VM: docker-machine ssh `docker-machine active` sudo umount `cat /proc/mounts | grep /var/lib/kubelet | awk '{print $2}' ` sudo rm -rf /var/lib/kubelet Troubleshooting Node is in NotReady state If you see your node as NotReady it's possible that your OS does not have memcg enabled. Your kernel should support memory accounting. Ensure that the following configs are turned on in your linux kernel: shell CONFIG_RESOURCE_COUNTERS=y CONFIG_MEMCG=y Enable the memory accounting in the kernel, at boot, as command line parameters as follows: shell GRUB_CMDLINE_LINUX="cgroup_enable=memory=1" NOTE: The above is specifically for GRUB2. You can check the command line parameters passed to your kernel by looking at the output of /proc/cmdline: shell $ cat /proc/cmdline BOOT_IMAGE=/boot/vmlinuz-3.18.4-aufs root=/dev/sda5 ro cgroup_enable=memory=1