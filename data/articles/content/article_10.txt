Alpha This is an Alpha release of Setting Up SSL proxy for Google Cloud Load Balancing. This feature might be changed in backward-incompatible ways and is not recommended for production use. It is not subject to any SLA or deprecation policy. Request to be whitelisted to use this feature . Google Cloud SSL proxy terminates user SSL (TLS) connections at the global load balancing layer, then balances the connections across your instances via SSL or TCP. Cloud SSL proxy is intended for non-HTTP(S) traffic. For HTTP(S) traffic, HTTP(S) load balancing is recommended instead. Contents Google Cloud Load Balancing with SSL proxy Setting up SSL load balancing Configure instance groups and backend services Configure frontend services Additional Commands Listing target SSL proxies Describe target SSL proxies Delete target SSL proxy Update a backend service for the target SSL proxy Update the SSL certificates for the target SSL proxy Update PROXY protocol header for the proxy PROXY protocol for retaining client connection information Recommendations Troubleshooting Pages fail to load from load balancer IP Alpha Limitations FAQ When should I use HTTPS load balancing instead of SSL proxy load balancing? Can I view the original IP address of the connection to the global load balancing layer? Overview We are excited to introduce SSL (TLS) proxying for your SSL traffic. With SSL proxy, you can terminate your customers' SSL sessions at the global load balancing layer, then forward the traffic to your virtual machine instances using SSL (recommended) or TCP. SSL proxy is a global load balancing service. You can deploy your instances in multiple regions, and global load balancing will automatically direct traffic to the region closest to the user. If a region is at capacity, the load balancer automatically directs new connections to another region with available capacity. Existing user connections to remain in the current region. We recommend use of end-to-end encryption for your SSL proxy deployment by configuring your backend service to accept traffic over SSL ( backend-services --protocol SSL ). This ensures that the client traffic decrypted at the SSL proxy layer is encrypted again before being sent to the backend instances. This end-to-end encryption requires you to provision certificates and keys on your instances so they can perform SSL processing. The advantages of managed SSL proxy are as follows: Intelligent routing - the load balancer can route requests to backend locations where there is capacity. In contrast, an L3/L4 load balancer must route to regional backends without paying attention to capacity. Use of smarter routing allows provisioning at N+1 or N+2 instead of x*N. Better utilization of the back-end servers - SSL processing can be very CPU intensive if the ciphers used are not CPU efficient. In order to maximize CPU performance, use ECDSA SSL certs,TLS1.2 and prefer the ECDHE-ECDSA-AES128-GCM-SHA256 cipher suite for SSL between the load balancer and your instances. Certificate management - You only need to update your customer facing certificate in one place when you need to switch certs. You can also reduce the management overhead for your instances by using self-signed certificates. Security patching - If vulnerabilities arise in the SSL or TCP stack, we will apply patches at the load balancer automatically in order to keep your instances safe. Notes: While choosing to send the traffic over unencrypted TCP ( backend-services --protocol TCP ) between the global load balancing layer and instances enables you to manage your SSL certificates at one place and offload SSL processing from your instances, it also comes with reduced security between your global load balancing layer and instances and is therefore not recommended. SSL proxy can handle HTTPS, but this is not recommended. You should instead use HTTP(S) load balancing for HTTPS traffic. See the FAQ for details. We now describe how SSL proxy works and walk you through configuring an SSL proxy for load balancing traffic to some instances. Google Cloud Load Balancing with SSL proxy With SSL proxy at the global load balancing layer, traffic coming over an SSL connection is terminated at the global layer then proxied to the closest available instance group. In this example, the traffic from the users in Iowa and Boston is terminated at the global load balancing layer, and a separate connection is established to the selected backend instance. Google Cloud Load Balancing with SSL termination (click to enlarge) Setting up SSL load balancing This example demonstrates setting up global SSL load balancing for a simple service that exists in two regions: us-central1 and us-east1 . We will configure the following: Instance groups for holding the instances A pair of instances for each instance group A health check for verifying instance health A backend service, which monitors instances in groups and prevents them from exceeding configured usage The SSL proxy itself with its SSL certificate A public static IP address and forwarding rule that sends user traffic to the proxy A firewall rule for the load balancer IP address After that, we'll test our configuration. Configure instance groups and backend services This section shows how to create simple instance groups, add instances to them, then add those instances to a backend service with a health check. A production system would normally use managed instance groups based on instance templates , but this setup is quicker for initial testing. Backend configuration (click to enlarge) Create an instance group for each zone gcloud compute instance-groups unmanaged create us-ig1 --zone us-central1-b Created [ [PROJECT_ID]/zones/us-central1-b/instanceGroups/us-ig1]. NAME ZONE NETWORK MANAGED INSTANCES us-ig1 us-central1-b 0 gcloud compute instance-groups unmanaged create us-ig2 --zone us-east1-b Created [ [PROJECT_ID]/zones/us-east1-b/instanceGroups/us-ig2]. NAME ZONE NETWORK MANAGED INSTANCES us-ig2 us-east1-b 0 Create two instances in each zone For testing purposes, we'll install Apache on each instance. Normally, you wouldn't use SSL load balancing for HTTP traffic, but Apache is commonly used and is easy to set up for testing. These instance are all being created with a tag of ssl-lb . This tag is used later by the firewall rule. Add instances to the instance groups Add ig-us-central1-1 and ig-us-central1-2 to us-ig1 gcloud compute instance-groups unmanaged add-instances us-ig1 \ --instances ig-us-central1-1,ig-us-central1-2 \ --zone us-central1-b Updated [ [PROJECT_ID]/zones/us-central1-b/instanceGroups/us-ig1]. Add ig-us-east1-1 and ig-us-east1-2 to us-ig2 gcloud compute instance-groups unmanaged add-instances us-ig2 \ --instances ig-us-east1-1,ig-us-east1-2 \ --zone us-east1-b Updated [ [PROJECT_ID]/zones/us-east1-b/instanceGroups/us-ig2]. You now have an instance group in two different regions, each with two instances. When we create a backend service, we have to specify a health check, so we'll create the health check next. Create a health check You can configure either an SSL or TCP health check for determining the health of your instances. If you are using SSL between the load balancer and the instances, use an SSL health check. If you are using plain TCP between the load balancer and the instances, use a TCP health check. Once configured, health checks are sent on a regular basis to the specified port on all the instances in the configured instance groups. If the health check fails, the instance is marked as UNHEALTHY and the load balancer stops sending new connections to that instance until the instance becomes healthy again. Existing connections are allowed to continue. In this example, we're creating a simple SSL health check that we'll use with our backend service. This health check does a simple SSL handshake with each instance on port 443 to determine health. If the handshake succeeds twice in a row (the default), the new instance is marked HEALTHY . If the handshake fails twice in a row (the default) on a HEALTHY instance, the instance is marked UNHEALTHY . If the handshake is again successful twice in a row, the instance is marked as HEALTHY again. See the Health checks section for more information and options. gcloud alpha compute health-checks create ssl my-ssl-health-check --port 443 Created [ [PROJECT_ID]/global/healthChecks/my-ssl-health-check]. NAME PROTOCOL my-ssl-health-check SSL Create a backend service A backend service defines the capacity, max utilization, and health check of the instance groups it contains. Backend services direct incoming traffic to one or more attached backends (depending on the load balancing mode, discussed later). Each backend consists of an instance group and additional configuration to balance traffic among the instances in the instance group. Each instance group is composed of one or more instances. Each backend service also specifies which health checks will be performed for the instances in an all the instance groups added to the backend service. The duration of idle SSL proxy connections through the load balancer is limited by the backend service timeout. In this example we'll add a backend service that connects to instances over SSL. This only governs connections between the load balancer and the instance, not the connections between users and the load balancer. gcloud alpha compute backend-services create my-backend-service \ --protocol SSL \ --health-check my-ssl-health-check \ --timeout 5m Created [ [PROJECT_ID]/global/backendServices/my-backend-service]. NAME BACKENDS PROTOCOL my-backend-service SSL Alternatively you could configure unencrypted communication between from the load balancer to the instances with --protocol TCP . Configure your backend service When you configure a backend service, you must add instance groups and specify a balancing mode that determines how much traffic the load balancer can send to instances in each instance group. Once the limit is reached for a particular instance group, additional requests are sent to an instance group that is next closest to the user, as long as it has capacity. SSL proxy supports the following balancing mode: UTILIZATION (default): instances can accept traffic as long as the average current CPU utilization of the instance group is below an indicated value. To set this value, use the --max-utilization parameter and pass a value between 0.0 (0%) and 1.0 (100%). Default is 0.8 (80%). For this example, we'll add both instance groups to the same backend service and set the balancing mode to send traffic to instance groups that have not reached 80% utilization. gcloud alpha compute backend-services add-backend my-backend-service \ --instance-group us-ig1 \ --zone us-central1-b \ --balancing-mode UTILIZATION \ --max-utilization 0.8 Updated [ [PROJECT_ID]/global/backendServices/my-backend-service]. gcloud alpha compute backend-services add-backend my-backend-service \ --instance-group us-ig2 \ --zone us-east1-b \ --balancing-mode UTILIZATION \ --max-utilization 0.8 Updated [ [PROJECT_ID]/global/backendServices/my-backend-service]. Configure frontend services This section shows how to create the following frontend resources: an SslCertificate resource to use with the load balancer an SSL proxy load balancer a static external IP address and a forwarding rule to use with that address a firewall rule that allows traffic from the load balancer and the health checker to reach the instances Frontend configuration (click to enlarge) Configure an SSL certificate and key If you don't have a private key and signed certificate, you can create and use a self-signed certificate for testing purposes, or get real certificate from an authority. See SSL Certificates for further information. You should not use a self-signed certificate on the load balancer for production purposes. This step takes your certificate and key and creates an SSL certificate resource that you will assign to your SSL proxy in the next step. gcloud compute ssl-certificates create my-ssl-cert \ --certificate [CRT_FILE_PATH] \ --private-key [KEY_FILE_PATH] Created [ [PROJECT_ID]/global/sslCertificates/ssl-cert1]. NAME CREATION_TIMESTAMP ssl-cert1 2016-02-20T20:53:33.584-08:00 Configure a target SSL proxy The target SSL proxy receives the packets from the user and sends them to the backend service. When you create the target SSL proxy, you associate your backend service and SSL certificate with that resource. If you want to enable insertion of PROXY protocol version 1 header, you can configure the command above with --proxy-header PROXY_V1 . For more information on PROXY protocol, see Update proxy protocol header for the proxy . gcloud alpha compute target-ssl-proxies create my-target-ssl-proxy \ --backend-service my-backend-service \ --ssl-certificate my-ssl-cert \ --proxy-header NONE Created [ [PROJECT_ID]/global/targetSslProxies/my-target-ssl-proxy]. NAME PROXY_HEADER SERVICE SSL_CERTIFICATES my-target-ssl-proxy NONE my-backend-service ssl-cert1 Reserve a global static IP address Now we need to create a global reserved static IP address for your service. This IP address is the one your customers will use to access your load balanced service. gcloud compute addresses create ssl-lb-static-ip --global Created [ [PROJECT_ID]/global/addresses/ssl-lb-static-ip]. NAME REGION ADDRESS STATUS ssl-lb-static-ip [LB_STATIC_IP] RESERVED Configure a global forwarding rule Create a global forwarding rule to forward specific IPs and ports to the target SSL proxy. When customer traffic arrives at your external IP address, this forwarding rule tells the network to send that traffic to your SSL proxy. To create a global forwarding rule associated with the target proxy, replace LB_STATIC_IP with the IP address you generated in the prior step. gcloud alpha compute forwarding-rules create my-global-forwarding-rule \ --global \ --target-ssl-proxy my-target-ssl-proxy \ --address [LB_STATIC_IP] \ --port-range 443 Created [ [PROJECT_ID]/global/forwardingRules/my-global-forwarding-rule]. NAME REGION IP_ADDRESS IP_PROTOCOL TARGET my-global-forwarding-rule [LB_STATIC_IP] TCP my-target-ssl-proxy Create a firewall rule for the SSL load balancer Configure the firewall to allow traffic from the load balancer and health checker to the instances. gcloud compute firewall-rules create allow-ssl-130-211-0-0-22 \ --source-ranges 130.211.0.0/22 \ --target-tags ssl-lb \ --allow tcp:443 Created [ [PROJECT_ID]/global/firewalls/allow-ssl-130-211-0-0-22]. NAME NETWORK SRC_RANGES RULES SRC_TAGS TARGET_TAGS allow-ssl-130-211-0-0-22 default 130.211.0.0/22 tcp:443 ssl-lb Test your load balancer In your web browser, connect to your static IP address via HTTPS. In this test setup, the instances are using self-signed certificates. Therefore, you will see a warning in your browser the first time you access a page. Click through the warning to see the actual page. You should see one of the hosts from the region closest to you. Reload the page until you see the other instance in that region. To see instances from the other region, either stop the instances in the closest region or disable Apache on those instances. Alternatively, you can use curl from the your local machine's command line. If you are using a self-signed certificate on the SSL proxy, you must also specify -k . curl -k [LB_STATIC_IP] Additional Commands Listing target SSL proxies gcloud alpha compute target-ssl-proxies list NAME PROXY_HEADER SERVICE SSL_CERTIFICATES my-target-ssl-proxy NONE my-backend-service ssl-cert1 Describe target SSL proxies gcloud alpha compute target-ssl-proxies describe my-target-ssl-proxy creationTimestamp: '2016-02-20T20:55:17.633-08:00' id: '9208913598676794842' kind: compute#targetSslProxy name: my-target-ssl-proxy proxyHeader: NONE selfLink: [PROJECT_ID]/global/targetSslProxies/my-target-ssl-proxy service: [PROJECT_ID]/global/backendServices/my-backend-service sslCertificates: - [PROJECT_ID]/global/sslCertificates/ssl-cert1 Delete target SSL proxy To delete a target proxy, you must first delete any global forwarding rules that reference it. You can use the update command to point your SSL proxy at a different backend service. In this example, we'll create a new backend service and point the proxy at it. We'll then point back to the original proxy. Use this command to replace the SSL certificate on the SSL proxy. You must already have created a second SSL certificate resource. gcloud alpha compute target-ssl-proxies update my-target-ssl-proxy \ --ssl-certificate ssl-cert2 Updated [ [PROJECT_ID]/global/targetSslProxies/my-target-ssl-proxy]. Use this command to change the PROXY protocol header for an existing target SSL proxy. gcloud alpha compute target-ssl-proxies update my-target-ssl-proxy \ --proxy-header [NONE | PROXY_V1] Updated [ [PROJECT_ID]/global/targetSslProxies/my-target-ssl-proxy]. PROXY protocol for retaining client connection information Google Cloud Load Balancing with SSL proxy terminates SSL connections from the client and creates new connections to the instances, hence the original client IP and port information is not preserved by default. If you would like to preserve and send this information to your instances, then you will need to enable PROXY protocol (version 1) where an additional header containing the original connection information including source IP address, destination IP address, and port numbers is added and sent to the instance as a part of the request. The PROXY protocol header will typically be a single line of user-readable text with the following format: PROXY TCP4 <client IP> <load balancing IP> <source port> <dest port>\r\n An example of the PROXY protocol is show below: PROXY TCP4 192.0.2.1 198.51.100.1 15221 443\r\n Where client IP is 192.0.2.1 , load balancing IP is 198.51.100.1 , client port is 15221 and the destination port is 443 . In cases where the client IP is not known, the load balancer will generate a PROXY protocol header in the following format: PROXY UNKNOWN\r\n Health checks Health checks determine which instances can receive new connections. The health checker polls instances at specified intervals. Instances that fail the check are marked as UNHEALTHY . However, the health checker continues to poll unhealthy instances. If an instance passes its health check, it is marked HEALTHY . You can configure either an SSL or TCP health check to determine the health of your backend instances. If you are using SSL between the load balancer and the instances, use an SSL health check. If you are using plain TCP between the load balancer and the instances, use a TCP health check. Once configured, health checks will be sent on a regular basis on the specified port to all the instances in the configured instance groups. When you configure the health check to be of type SSL , an SSL connection is opened to each of your instances. When you configure the health check to be of type TCP , a TCP connection is opened. The health check itself can use one of the following checks: Simple handshake health check (default): the health checker attempts a simple TCP or SSL handshake. If it is successful, the instance passes. Request/response health check : you provide a request string for the health checker to send after completing the TCP or SSL handshake. If the instance returns the response string you've configured, the instance is marked as HEALTHY . Both the request and response strings can be up to 1024 bytes. If the check succeeds twice in a row (the default) on a new instance, the instance is marked HEALTHY . If the check fails twice in a row (the default) on a HEALTHY instance, the instance is marked UNHEALTHY . If the check is again successful twice in a row (default), the instance is marked as HEALTHY again. Existing connections are allowed to continue on instances that have failed their health check. Create a health check gcloud alpha compute health-checks create [tcp | ssl] my-ssl-health-check \ [--port PORT ] \ ...other options If you are encrypting traffic between the load balancer and your instances, use an SSL health check. If the traffic is unencrypted, use a TCP health check. Health check create options --check-interval [CHECK_INTERVAL]; default= 5s How often to perform a health check for an instance. For example, specifying 10s will run the check every 10 seconds. Valid units for this flag are s for seconds and m for minutes. --description [DESCRIPTION] An optional textual description for the health check. Must be surrounded by quotes if the string contains spaces. --healthy-threshold [HEALTHY_THRESHOLD]; default= 2 The number of consecutive successful health checks before an unhealthy instance is marked as HEALTHY . --port [PORT]; default= 80 for TCP, 443 for SSL The TCP port number that this health check monitors. --request An optional string of up to 1024 characters that the health checker can send to the instance. The health checker then looks for a reply from the instance of the string provided in the --response field. If --response is not configured, the health checker does not wait for a response and regards the check as successful if the TCP or SSL handshake was successful. --response An optional string of up to 1024 characters that the health checker expects to receive from the instance. If the response is not received exactly, the health check fails. If --response is configured, but not --request , the health checker will wait for a response anyway. Unless your system automatically sends out a message in response to a successful handshake, always configure --response to match an explicit --request . --timeout [TIMEOUT]; default= 5s If the health checker doesn't receive valid response from the instance within this interval, the check is considered a failure. For example, specifying 10s will cause the check to wait for 10 seconds before considering the request a failure. Valid units for this flag are s for seconds and m for minutes. --unhealthy-threshold [UNHEALTHY_THRESHOLD]; default= 2 The number of consecutive health check failures before a healthy instance is marked as UNHEALTHY . List health checks Lists all the health checks in the current project. gcloud alpha compute health-checks list NAME PROTOCOL my-ssl-health-check SSL Describe a health check Provides detailed information about a specific health check. gcloud alpha compute health-checks describe my-ssl-health-check checkIntervalSec: 5 creationTimestamp: '2016-02-20T20:47:26.034-08:00' description: '' healthyThreshold: 2 id: '1423984233044836273' kind: compute#healthCheck name: my-ssl-health-check selfLink: [PROJECT_ID]/global/healthChecks/my-ssl-health-check sslHealthCheck: port: 443 timeoutSec: 5 type: SSL unhealthyThreshold: 2 To modify a parameter in a health check, run the following command and pass in any of the create parameters. Any specified parameters will be changed. All unspecified parameters will be left the same. gcloud alpha compute health-checks [tcp|ssl] update [--options] Example: gcloud alpha compute health-checks update ssl my-ssl-health-check \ --description "SSL health check" Updated [ [PROJECT_ID]/global/healthChecks/my-ssl-health-check]. Recommendations You should configure the load balancer to prepend a PROXY protocol version 1 header if you need to retain the client connection information. If your traffic is HTTPS, then you should use HTTPS Load Balancing and not SSL proxy for load balancing. Troubleshooting Pages fail to load from load balancer IP Verify the health of instances Verify that the instances are HEALTHY. gcloud alpha compute backend-services get-health my-backend-service --- backend: [PROJECT_ID]/zones/us-central1-b/resourceViews/us-ig1 status: kind: compute#backendServiceGroupHealth --- backend: [PROJECT_ID]/zones/us-east1-b/instanceGroups/us-ig2 status: kind: compute#backendServiceGroupHealth Confirm that your firewall rule is correct Both the health checker and the load balancer need 130.211.0.0/22 to be open If you are doing SSL between the load balancer and the instances, you should do an SSL health check. In that case, tcp:443 must be allowed by the firewall from 130.211.0.0/22 . If you are doing TCP to the instances, do a TCP health check and open tcp:80 from 130.211.0.0/22 instead. If you are leveraging instance tags, make sure the tag is listed as under TARGET_TAGS in the firewall rule, and make sure all your instances have that tag. In this example, instances are tagged with ssl-lb . gcloud compute firewall-rules list NAME NETWORK SRC_RANGES RULES SRC_TAGS TARGET_TAGS allow-ssl-130-211-0-0-22 default 130.211.0.0/22 tcp:443 ssl-lb Try to reach individual instances Temporarily set a firewall rule that allows you to access your instances individually, then try to load a page from a specific instance. Then access one or more of your instances directly from your browser. [EXTERNAL_IP] Alpha Limitations The PROXY protocol header is currently only allowed if the protocol between the load balancer and the instance is set to TCP. This will be fixed for protocol SSL by Beta timeframe. FAQ When should I use HTTPS load balancing instead of SSL proxy load balancing? Though SSL proxy can handle HTTPS traffic, HTTPS Load Balancing has additional features that make it a better choice in most cases. HTTPS load balancing has the following additional functionality: Negotiates HTTP/2 and SPDY/3.1 Rejects invalid HTTP requests or responses Forwards requests to different instance groups based on URL host and path Integrates with Cloud CDN . Spreads the request load more evenly among instances, providing better instance utilization. HTTPS load balances each request separately, whereas SSL proxy sends all bytes from the same SSL or TCP connection to the same instance. SSL proxy for Google Cloud Load Balancing can be used for other protocols that use SSL, such as Websockets and IMAP over SSL. Can I view the original IP address of the connection to the global load balancing layer? Yes. You can configure the load balancer to prepend a PROXY protocol version 1 header to retain the original connection information. See Update proxy protocol header for the proxy for details.