Google Cloud Storage always encrypts your data on the server side, before it is written to disk, at no additional charge. By default, Google Cloud Storage uses its own server-side encryption keys to encrypt data. Alternatively, you can provide your own encryption keys. In addition, you can choose to encrypt data on the client side before you write it to Google Cloud Storage. This page explains how to manage each type of data encryption. Warning: If you use customer-supplied encryption keys, or if you encrypt your data on the client side, you must securely manage your keys and ensure that they are not lost. If you lose your keys, you will no longer be able to read your data, and you will continue to be charged for storage of your objects until you delete them. Contents Server-side encryption This section explains how server-side encryption works with Google Cloud Storage. Default behavior By default, Google Cloud Storage manages server-side encryption keys on your behalf using the same hardened key management systems that we use for our own encrypted data, including strict key access controls and auditing. Google Cloud Storage encrypts user data at rest using AES-256 , and each encryption key is itself encrypted with a regularly rotated set of master keys. There is no setup or configuration required, no need to modify the way you access the service, and no visible performance impact. Data is automatically and transparently decrypted when read by an authorized user. To protect your data as it travels over the Internet during read and write operations, use Transport Layer Security, commonly known as TLS or HTTPS. Customer-supplied encryption keys Beta This is a Beta release of Customer-Supplied Encryption Keys. This feature is not covered by any SLA or deprecation policy and may be subject to backward-incompatible changes. You can also choose to provide your own AES-256 key for server-side encryption. This key is known as a customer-supplied encryption key . If you provide an encryption key, Google Cloud Storage does not permanently store your key on Google's servers or otherwise manage your key. Instead, you provide your key for each Google Cloud Storage operation, and your key is purged from Google's servers after the operation is complete. Google Cloud Storage stores only a cryptographic hash of the key so that future requests can be validated against the hash. Your key cannot be recovered from this hash, and the hash cannot be used to decrypt your data. Note: Note: You cannot use the Google Cloud Platform Console to download objects that are encrypted with a customer-supplied encryption key. Similarly, when you use the Google Cloud Platform Console to upload an object, you cannot encrypt the object with a customer-supplied encryption key. Google Cloud Storage Transfer Service , Cloud Dataflow , and Cloud Dataproc do not currently support objects encrypted with customer-supplied encryption keys. When an object is encrypted with a customer-supplied encryption key, you cannot retrieve the object's CRC32C checksum and MD5 hash unless you supply your key. In addition, the object's ETag contains a different value than the MD5 hash. Important: Metadata for objects and buckets is not encrypted, with the exception of the CRC32C checksum and MD5 hash for each object. In particular, the names of objects and buckets are not encrypted. Also, you can read or update the metadata of an encrypted object without providing the encryption key. Do not include sensitive information in your object and bucket metadata or names. To protect your data as it travels over the Internet during read and write operations, use Transport Layer Security, commonly known as TLS or HTTPS. TLS is required when you provide an encryption key. Generating a customer-supplied encryption key You can use the following Python command to generate a Base64-encoded AES-256 key, as well as the Base64-encoded SHA256 hash of the key: python -c 'import base64; import hashlib; import os; key = os.urandom(32); \ print "Key: %sSHA256 hash: %s" % (base64.encodestring(key), \ base64.encodestring(hashlib.sha256(key).digest()))' Using customer-supplied encryption keys with the JSON API You can use your own customer-supplied encryption key for any operation that is supported by Google Cloud Storage. Note: If an object is encrypted with a customer-supplied encryption key, and you attempt to read the object's metadata without providing the key, the metadata will not include the object's CRC32C checksum or MD5 hash. To use customer-supplied encryption keys with the JSON API, you must use a Google API Client Library . The Google Cloud Client Libraries do not support customer-supplied encryption keys. Request When you use a customer-supplied encryption key, you are required to provide both the AES-256 key and a SHA256 hash of the key. You should store both the AES-256 key and the SHA256 hash of the key securely. Google will store the SHA256 hash of your key in the object's metadata, where you can retrieve it later. This SHA256 hash cannot be used by Google (or anyone else) to decrypt your data. It is stored as a way for you to uniquely identify the AES-256 key that was used to encrypt a particular object. To use a customer-supplied encryption key, include the following HTTP headers in your request: If you are performing a rewrite operation, you must also include the following HTTP headers in your request. The headers listed above will be used for the destination object, and the following headers will be used for the source object. Important: The rewrite operation makes a copy of an object. If you omit the headers listed above in a rewrite operation, the destination object will be encrypted using the default server-side encryption, not customer-supplied encryption keys. Google Cloud Storage will use your encryption key to encrypt or decrypt the object as necessary for the request. Response The metadata for the customer-supplied encryption key is returned in the response, which includes the following additional properties: customerEncryption object Information about the encryption used for the request. customerEncryption.encryptionAlgorithm string The encryption algorithm that was used. Always contains the value AES256 . customerEncryption.keySha256 string An RFC 4648 Base64-encoded string of the SHA256 hash of your encryption key. You can use this SHA256 hash to uniquely identify the AES-256 encryption key required to decrypt the object, which you must store securely. You will receive an HTTP 400 error in the following cases: You upload an object using a customer-supplied encryption key, and you attempt to perform another operation on the object (other than requesting or updating metadata) without providing the key. You upload an object using a customer-supplied encryption key, and you attempt to perform another operation on the object with an incorrect key. You upload an object without providing a customer-supplied encryption key, and you attempt to perform another operation on the object with a customer-supplied encryption key. You specify an encryption algorithm, key, or SHA256 hash that is not valid. Sample code The following sample code illustrates how to use customer-supplied encryption keys to upload an object with the JSON API: Using customer-supplied encryption keys with the XML API You can use your own customer-supplied encryption key for any operation that is supported by Google Cloud Storage. Note: If an object is encrypted with a customer-supplied encryption key, and you attempt to read the object's metadata without providing the key, the metadata will not include the object's CRC32C checksum or MD5 hash. Request When you use a customer-supplied encryption key, you are required to provide both the AES-256 key and a SHA256 hash of the key. You should store both the AES-256 key and the SHA256 hash of the key securely. Google will store the SHA256 hash of your key in the object's metadata, where you can retrieve it later. This SHA256 hash cannot be used by Google (or anyone else) to decrypt your data. It is stored as a way for you to uniquely identify the AES-256 key that was used to encrypt a particular object. To use a customer-supplied encryption key, include the following HTTP headers in your request: Google Cloud Storage will use your encryption key to encrypt or decrypt the object as necessary for the request. Response The response includes the following headers: You will receive an HTTP 400 error in the following cases: You upload an object using a customer-supplied encryption key, and you attempt to perform another operation on the object (other than requesting or updating metadata) without providing the key. You upload an object using a customer-supplied encryption key, and you attempt to perform another operation on the object with an incorrect key. You upload an object without providing a customer-supplied encryption key, and you attempt to perform another operation on the object with a customer-supplied encryption key. You specify an encryption algorithm, key, or SHA256 hash that is not valid. Using customer-supplied encryption keys with gsutil You can use your own customer-supplied encryption key for any operation that is supported by gsutil. Installing a current version of gsutil To use a customer-supplied encryption key with gsutil, you need to install gsutil 4.18 or later . Updating the boto configuration file To use a customer-supplied encryption key, add the following option to your boto configuration file : Note: gsutil automatically calculates the SHA256 hash of your AES-256 encryption key, so there is no need to configure it in the .boto file. You can also specify multiple decryption keys, which will only be used to decrypt objects. (The encryption key is also used as a decryption key.) For details, see the gsutil documentation . After you specify encryption or decryption keys in your boto configuration file, they will be used for all subsequent gsutil commands. Note: gsutil will calculate the SHA256 hash of the supplied decryption keys and select the correct decryption key to use for a particular object by matching the SHA256 hash on the object's metadata. You will receive an error if you upload an object using a customer-supplied encryption key, and you attempt to perform another operation on the object (other than requesting or updating metadata) without providing the key. Rotating customer-supplied encryption keys If an object is encrypted using a customer-supplied encryption key, you can rotate the object's key by rewriting the object . Rewrites are supported only by the JSON API, not by the XML API. If your bucket uses Note: object versioning , be sure to delete the archived versions of your objects after you rotate the key. Archived versions will not be deleted automatically and will retain the old key. If you accidentally use your encryption key over an unencrypted (HTTP) connection, it is possible for an attacker to intercept your key. When this happens, the Google Cloud Storage API returns an error message warning you that your key may be compromised. You should immediately rotate your keys. Client-side encryption Server-side encryption can be used in combination with client-side encryption. With client-side encryption, you manage your own client-side encryption keys and encrypt data before writing it to Google Cloud Storage. In this case, your data is encrypted twice: once with your client-side key and once with a server-side key. When you read an object, you must decrypt the object on the client side. Note: Google Cloud Storage does not know if your data has already been encrypted on the client side, nor does Google Cloud Storage have any knowledge of your client-side encryption keys.