Say Hello to React CDK This is a C omponent D evelopment K it for React. It's not a just another boilerplate, but something much much more, and it comes with support from Kadira . Why? React is awesome. You can build cool stuff with React and you may want to share what you've built with the community. But, that can be hard. Setting up the development environment is pretty damn hard. And we (the community) already discussed this . (JS Fatigue) Even if you are really good at setting up the correct build tools, maintaining those build tools and keeping them up to date is pretty hard. And it gets worse if you are maintaining a few different React projects. React CDK is not an answer to JS Fatigue, but it does allow you to create React components and utilities without worrying about build tools and blah blah blah. You'll get the maximum flexibility and we haven't re-invented anything. &#x1f913;: Sounds cool. Tell me more. What React CDK Is? React CDK is a yeoman generator and a set of build tools that makes development of React components simple and fun. There a lot of things you can do with it, including: Creating a project with a single command. Writing a component in ES2015+ syntax. Using a live development environment with React Storybook. Writing tests with Mocha and Enzyme right away. Working with Eslint with an Airbnb style guide. Publishing correctly transpiled code into NPM. Deploying your storybook to GitHub Pages. Getting updates to the core building tools (so, you are always up to date). &#x1f913;: Okay. How should I get started? Simple. Just install React CDK with: npm install -g yo generator-react-cdk You may not want to install yo, if you've installed it previously. If you don't know what yo is, don't worry. Then you can create a project with: yo react-cdk react-wizard It'll create a project under the react-wizard directory with a set of files. It's a typical NPM module configured for React and some other tools. All the source files live in the src directory and that's the place you need to worry about. You can start developing a component by editing src/index.js in your favorite editor. &#x1f913;: This is not something new. We have a lot of yeoman generators and React boilerplates. Yeah! This is where it's different. Keep reading. Live Development Environment You always need a sample app to test your component. You can use your own app, but there should be a better way. We recently launched React Storybook. It's the perfect tool for this. Simply run: npm run storybook Then you'll have a storybook console, configured to use your component. You can write stories inside the src/stories directory. With this method, you'll able to see what your component looks like while you are still developing it. Also, you'll be able to test different states of your component visually. Testing, Linking and More React CDK will configure your project with the best JavaScript code quality tools. It uses the Airbnb JavaScript style guide as a reference. It is also configured for Enzyme and JSDOM for simple React testing. You can even publish your storybook into GitHub Pages in a single command. To learn more about React CDK , visit here . Support and Updates Unlike any other boilerplate or generator, you can update the tools inside this project with a single command. That means you never need to worry about keeping your build tools up to date. Let us worry about it. Here's how you can update your project: This will update your component dev tools to the latest and greatest. You never need to worry about updating them manually. &#x1f913;: This is great, but can I change those build tools and configure them as I want? Of course, yes . We've written it in a way that allows you to configure your project and build tools as you want (and in the way you're used to doing). For this, refer to the configuration guide . Build, Share and Help I hope you guys have a lot of cool ideas and you want to share a lot of the cool stuff that you've build inside your project (and your company). Let's make things happen by sharing them with the React community. We'd all love to see them. I hope React CDK makes things simple for you and saves you time. You can also convert your existing components into React CDK. You simply move your source files and add NPM dependencies to package.json . I'd like to see how you are using React CDK. And let us know how we can improve this project. Follow KADIRA VOICE for more articles like this.