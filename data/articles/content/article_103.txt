Today we're making a new extension available that enables C++ development in Visual Studio for Linux. With this extension you can author C++ code for Linux servers, desktops and devices. You can manage your connections to these machines from within VS. VS will automatically copy and remote build your sources and can launch your application with the debugger. Our project system supports targeting specific architectures, including ARM. Read on for how to get started with our new Linux projects. Today we only support building remotely on the Linux target machine. We are not limited by specific Linux distros but we do have dependencies on the presence of some tools. Specifically, we need openssh-server, g++, gdb and gdbserver. Use your favorite package manager to install them, e.g. on Debian based systems: sudo apt-get install openssh-server g++ gdb gdbserver Installation Download the Visual C++ for Linux Development extension or get it from the extension manager in Visual Studio. Today we do have a dependency on the Android Tools for Visual Studio. If you already have VS installed you can add those by going to Add Remove Programs, modify Visual Studio and select them under Visual C++ Mobile Development. To get started create a new project by going to Templates > Visual C++ > Cross Platform > Linux . Today we have three templates available; Blink for IoT devices like the Raspberry Pi, Console Application as a bare application, and Empty for you to add sources and configure from a clean slate. Your First VS Linux Project Let's get started by creating a Console app. After creating your project from that template set a break point on the printf statement then hit F5 or the Remote GDB Debugger button. By default, the Console Application is set to a debug/x64 configuration. If your remote target is x86 or ARM you'll want to change those options first. In this example I'm using a x64 Ubuntu VM. Since this is our first time targeting a Linux machine you will be prompted for connection information. This is triggered by building the project. We support both password and certificate base authorization, including use of passphrases with certificates. Upon a successful connection we save your connection information for subsequent connections. You can manage your saved connections under Tools > Options > Cross Platform > Linux . Yes, passwords/passphrases are encrypted when stored. We plan to support connecting without saving the connection information in a future update. Upon connecting, your sources will be copied to the remote Linux machine and we will invoke gcc to build the sources with the options from the project properties. After the build successfully completes, your code will be launched on the remote machine and you will hit the break point you set earlier. Linux Project Properties Let's take a look at the project properties to understand where things got deployed on the remote Linux machine. Under remote settings, you will see the remote root is set to ~/projects/ by default and that we are setting the remote project directory to match our project name in that location. If we take a look on the Linux machine, we'll find main.cpp as well as our build artifacts in ~/projects/ConsoleApplication1. Looking at the General settings for the project, you can see how our output and intermediate directories were configured. Additionally, you'll see that this project was configured as an application - thus our executable is under bin/x64/Debug/ as ConsoleApplication1.out. Notice that for configuration types we also support static and dynamic libraries. Linux IoT Projects Now let's take a look at an IoT device, the Raspberry Pi. You can use any type of Pi running Raspbian. For our blink sample we use wiringPi - if you don't have this setup you can either install it via apt or from source. To add a new connection, go to Tools > Options and search for Linux. Now click add to connect to your Raspberry Pi. Go to project properties and take a look under Build Events at Remote Post-Build Events. You can use this to execute a command on the remote Linux target after build. This template comes preconfigured to export the GPIO pin for the LED so that we don't have to run our executable as root. Now connect an LED to pin 17 on your Raspberry Pi as shown here. Open main.cpp and set a breakpoint on the delay call after the first digitalWrite and hit F5. You should see your LED light up and execution will pause at your breakpoint. Step through your code over the next digitalWrite call and you will see your LED turn off. Visit our IoT Development page to stay current on all of our offerings in this space. We've covered headless and device Linux applications, what about desktop? Well, we have something special here: we're going to launch an OpenGL app on a Linux desktop. First make sure your Linux desktop has been configured for OpenGL development. Here are the apt packages we used: libgles1-mesa, libgles1-mesa-dev, freeglut3, freeglut3-dev. Now create an empty Linux project and go grab the source for Spinning Cube from Julien Guertault's OpenGL tutorial . Extract it and add main.c to your project. To enable Intellisense you will need to add the OpenGL headers to the VC++ Directories, you can get them from the OpenGL Registry . Now go to your project properties and add export DISPLAY=:0.0 to the Pre-Launch command. Now, under Linker Input add the library dependencies: m;GL;GLU;glut. Also, make sure your remote settings are for the right machine. Now hit F5. A couple of interesting places to put breakpoints are around line 80 where the cube rotation is set (try changing the alpha value) or in KeyboardFunc where you can inspect the values of the pressed key. Go Write Some Native Linux Code We hope you are as excited by the possibilities this opens up as we are. Install the Visual C++ for Linux Development extension , try it out and let us know what works for you, what doesn't or if you encounter any issues. If your focus is IoT remember to check out our IoT Development page to stay current on happenings there. You can reach us here through the blog, on the extension page on the gallery, via the VS Feedback channel, or find our team @visualc or me, @robotdad , on Twitter. - Marc Goodner